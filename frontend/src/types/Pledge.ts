/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Pledge {
  export type CommitmentStruct = {
    user: AddressLike;
    description: string;
    deadline: BigNumberish;
    stakeAmount: BigNumberish;
    completed: boolean;
    claimed: boolean;
  };

  export type CommitmentStructOutput = [
    user: string,
    description: string,
    deadline: bigint,
    stakeAmount: bigint,
    completed: boolean,
    claimed: boolean
  ] & {
    user: string;
    description: string;
    deadline: bigint;
    stakeAmount: bigint;
    completed: boolean;
    claimed: boolean;
  };
}

export interface PledgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimStake"
      | "commitments"
      | "createCommitment"
      | "donationAddress"
      | "getCommitmentDetails"
      | "getUserCommitments"
      | "markAsCompleted"
      | "totalCommitments"
      | "userCommitments"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitmentCompleted"
      | "CommitmentCreated"
      | "StakeClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCommitment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitmentDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCommitments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsCompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommitments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userCommitments",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claimStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCommitments",
    data: BytesLike
  ): Result;
}

export namespace CommitmentCompletedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitmentCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    description: string,
    deadline: BigNumberish,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    description: string,
    deadline: bigint,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    description: string;
    deadline: bigint;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeClaimedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    success: boolean
  ];
  export type OutputTuple = [id: bigint, user: string, success: boolean];
  export interface OutputObject {
    id: bigint;
    user: string;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Pledge extends BaseContract {
  connect(runner?: ContractRunner | null): Pledge;
  waitForDeployment(): Promise<this>;

  interface: PledgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimStake: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  commitments: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean] & {
        user: string;
        description: string;
        deadline: bigint;
        stakeAmount: bigint;
        completed: boolean;
        claimed: boolean;
      }
    ],
    "view"
  >;

  createCommitment: TypedContractMethod<
    [_description: string, _durationInDays: BigNumberish],
    [void],
    "payable"
  >;

  donationAddress: TypedContractMethod<[], [string], "view">;

  getCommitmentDetails: TypedContractMethod<
    [_id: BigNumberish],
    [Pledge.CommitmentStructOutput],
    "view"
  >;

  getUserCommitments: TypedContractMethod<
    [_user: AddressLike],
    [bigint[]],
    "view"
  >;

  markAsCompleted: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalCommitments: TypedContractMethod<[], [bigint], "view">;

  userCommitments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimStake"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean, boolean] & {
        user: string;
        description: string;
        deadline: bigint;
        stakeAmount: bigint;
        completed: boolean;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCommitment"
  ): TypedContractMethod<
    [_description: string, _durationInDays: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "donationAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCommitmentDetails"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [Pledge.CommitmentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCommitments"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "markAsCompleted"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalCommitments"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userCommitments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "CommitmentCompleted"
  ): TypedContractEvent<
    CommitmentCompletedEvent.InputTuple,
    CommitmentCompletedEvent.OutputTuple,
    CommitmentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "CommitmentCreated"
  ): TypedContractEvent<
    CommitmentCreatedEvent.InputTuple,
    CommitmentCreatedEvent.OutputTuple,
    CommitmentCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StakeClaimed"
  ): TypedContractEvent<
    StakeClaimedEvent.InputTuple,
    StakeClaimedEvent.OutputTuple,
    StakeClaimedEvent.OutputObject
  >;

  filters: {
    "CommitmentCompleted(uint256)": TypedContractEvent<
      CommitmentCompletedEvent.InputTuple,
      CommitmentCompletedEvent.OutputTuple,
      CommitmentCompletedEvent.OutputObject
    >;
    CommitmentCompleted: TypedContractEvent<
      CommitmentCompletedEvent.InputTuple,
      CommitmentCompletedEvent.OutputTuple,
      CommitmentCompletedEvent.OutputObject
    >;

    "CommitmentCreated(uint256,address,string,uint256,uint256)": TypedContractEvent<
      CommitmentCreatedEvent.InputTuple,
      CommitmentCreatedEvent.OutputTuple,
      CommitmentCreatedEvent.OutputObject
    >;
    CommitmentCreated: TypedContractEvent<
      CommitmentCreatedEvent.InputTuple,
      CommitmentCreatedEvent.OutputTuple,
      CommitmentCreatedEvent.OutputObject
    >;

    "StakeClaimed(uint256,address,bool)": TypedContractEvent<
      StakeClaimedEvent.InputTuple,
      StakeClaimedEvent.OutputTuple,
      StakeClaimedEvent.OutputObject
    >;
    StakeClaimed: TypedContractEvent<
      StakeClaimedEvent.InputTuple,
      StakeClaimedEvent.OutputTuple,
      StakeClaimedEvent.OutputObject
    >;
  };
}
